"use strict";
var Prelude = require("Prelude");
var Data_Either = require("Data.Either");
var Data_Tuple = require("Data.Tuple");
var Data_Maybe = require("Data.Maybe");
var Data_List = require("Data.List");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Global = require("Global");
var Data_Semiring_Free = require("Data.Semiring.Free");
var Data_Foldable = require("Data.Foldable");
var Data_Validation_Semiring = require("Data.Validation.Semiring");
var Data_Map = require("Data.Map");
var Routing_Types = require("Routing.Types");
var Routing_Match_Class = require("Routing.Match.Class");
var Routing_Match_Error = require("Routing.Match.Error");
var Match = function (x) {
    return x;
};
var unMatch = function (v) {
    return v;
};

/**
 *  It groups `Free MatchError` -> [[MatchError]] -map with showMatchError ->
 *  [[String]] -fold with semicolon-> [String] -fold with newline-> String
 */
var runMatch = function (v) {
    return function (route) {
        var foldErrors = function (errs) {
            return Data_Either.Left.create(Data_Foldable.foldl(Data_List.foldableList)(function (b) {
                return function (a) {
                    return a + ("\n" + b);
                };
            })("")(Prelude.bind(Data_List.bindList)(Prelude["<$>"](Data_List.functorList)(Data_List.reverse)(Data_Semiring_Free.runFree(errs)))(function (v1) {
                return Prelude.pure(Data_List.applicativeList)(Data_Foldable.foldl(Data_List.foldableList)(function (b) {
                    return function (a) {
                        return a + (";" + b);
                    };
                })("")(Prelude["<$>"](Data_List.functorList)(Routing_Match_Error.showMatchError)(v1)));
            })));
        };
        return Data_Validation_Semiring.runV(foldErrors)(function ($80) {
            return Data_Either.Right.create(Data_Tuple.snd($80));
        })(v(route));
    };
};
var matchFunctor = new Prelude.Functor(function (fn) {
    return function (v) {
        return Match(function (r) {
            return Data_Validation_Semiring.runV(Data_Validation_Semiring.invalid)(function (v1) {
                return Prelude.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(v1.value0, fn(v1.value1)));
            })(v(r));
        });
    };
});
var matchApply = new Prelude.Apply(function () {
    return matchFunctor;
}, function (v) {
    return function (v1) {
        var processFnRes = function (v2) {
            return Data_Validation_Semiring.runV(Data_Validation_Semiring.invalid)(function (v3) {
                return Prelude.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(v3.value0, v2.value1(v3.value1)));
            })(v1(v2.value0));
        };
        var processFnErr = function (r) {
            return function (err) {
                return Data_Validation_Semiring.invalid(Prelude["*"](Data_Semiring_Free.semiringFree)(err)(Data_Validation_Semiring.runV(Prelude.id(Prelude.categoryFn))(Prelude["const"](Prelude.one(Data_Semiring_Free.semiringFree)))(v1(r))));
            };
        };
        return Match(function (r) {
            return Data_Validation_Semiring.runV(processFnErr(r))(processFnRes)(v(r));
        });
    };
});
var matchApplicative = new Prelude.Applicative(function () {
    return matchApply;
}, function (a) {
    return function (r) {
        return Prelude.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(r, a));
    };
});
var matchAlt = new Control_Alt.Alt(function () {
    return matchFunctor;
}, function (v) {
    return function (v1) {
        return Match(function (r) {
            return Control_Alt["<|>"](Data_Validation_Semiring.altV(Data_Semiring_Free.semiringFree))(v(r))(v1(r));
        });
    };
});
var matchPlus = new Control_Plus.Plus(function () {
    return matchAlt;
}, Match(Prelude["const"](Data_Validation_Semiring.invalid(Prelude.one(Data_Semiring_Free.semiringFree)))));
var matchAlternative = new Control_Alternative.Alternative(function () {
    return matchPlus;
}, function () {
    return matchApplicative;
});
var matchMatchClass = new Routing_Match_Class.MatchClass(function () {
    return matchAlternative;
}, function (route) {
    if (route instanceof Data_List.Cons && (route.value0 instanceof Routing_Types.Path && route.value0.value0 === "true")) {
        return Prelude.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(route.value1, true));
    };
    if (route instanceof Data_List.Cons && (route.value0 instanceof Routing_Types.Path && route.value0.value0 === "false")) {
        return Prelude.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(route.value1, false));
    };
    return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedBoolean.value));
}, function (msg) {
    return function (v) {
        return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(new Routing_Match_Error.Fail(msg)));
    };
}, function (input) {
    return function (route) {
        if (route instanceof Data_List.Cons && (route.value0 instanceof Routing_Types.Path && route.value0.value0 === input)) {
            return Prelude.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(route.value1, Prelude.unit));
        };
        if (route instanceof Data_List.Cons && route.value0 instanceof Routing_Types.Path) {
            return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(new Routing_Match_Error.UnexpectedPath(input)));
        };
        return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedPathPart.value));
    };
}, function (route) {
    if (route instanceof Data_List.Cons && route.value0 instanceof Routing_Types.Path) {
        var res = Global.readFloat(route.value0.value0);
        var $51 = Global["isNaN"](res);
        if ($51) {
            return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedNumber.value));
        };
        if (!$51) {
            return Prelude.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(route.value1, res));
        };
        throw new Error("Failed pattern match at Routing.Match line 41, column 9 - line 45, column 7: " + [ $51.constructor.name ]);
    };
    return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedNumber.value));
}, function (key) {
    return function (route) {
        if (route instanceof Data_List.Cons && route.value0 instanceof Routing_Types.Query) {
            var $56 = Data_Map.lookup(Prelude.ordString)(key)(route.value0.value0);
            if ($56 instanceof Data_Maybe.Nothing) {
                return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(new Routing_Match_Error.KeyNotFound(key)));
            };
            if ($56 instanceof Data_Maybe.Just) {
                return Prelude.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(new Data_List.Cons(Routing_Types.Query.create(Data_Map["delete"](Prelude.ordString)(key)(route.value0.value0)), route.value1), $56.value0));
            };
            throw new Error("Failed pattern match at Routing.Match line 67, column 9 - line 72, column 7: " + [ $56.constructor.name ]);
        };
        return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedQuery.value));
    };
}, function (route) {
    if (route instanceof Data_List.Cons && route.value0 instanceof Routing_Types.Query) {
        return Prelude.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(route.value1, route.value0.value0));
    };
    return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedQuery.value));
}, function (route) {
    if (route instanceof Data_List.Cons && route.value0 instanceof Routing_Types.Path) {
        return Prelude.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(route.value1, route.value0.value0));
    };
    return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedString.value));
});

/**
 *  | Matches list of matchers. Useful when argument can easy fail (not `str`)
 *  | returns `Match Nil` if no matches
 */
var list = function (v) {
    var go = function (accum) {
        return function (r) {
            return Data_Validation_Semiring.runV(Prelude["const"](Prelude.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(r, Data_List.reverse(accum)))))(function (v1) {
                return go(new Data_List.Cons(v1.value1, accum))(v1.value0);
            })(v(r));
        };
    };
    return Match(go(Data_List.Nil.value));
};

/**
 *  | if we match something that can fail then we have to
 *  | match `Either a b`. This function converts matching on such
 *  | sum to matching on right subpart. Matching on left branch fails.
 *  | i.e.
 *  | ```purescript
 *  | data Sort = Asc | Desc
 *  | sortOfString :: String -> Either String Sort
 *  | sortOfString "asc" = Right Asc
 *  | sortOfString "desc" = Right Desc
 *  | sortOfString _ = Left "incorrect sort"
 *  |
 *  | newtype Routing = Routing Sort
 *  | routes :: Match Routing
 *  | routes = (pure Routing) <*> (eitherMatch (sortOfString <$> var))
 *  |
 *  | ```
 */
var eitherMatch = function (v) {
    var runEither = function (v1) {
        if (v1.value1 instanceof Data_Either.Left) {
            return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(new Routing_Match_Error.Fail("Nested check failed")));
        };
        if (v1.value1 instanceof Data_Either.Right) {
            return Prelude.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(v1.value0, v1.value1.value0));
        };
        throw new Error("Failed pattern match at Routing.Match line 157, column 5 - line 159, column 36: " + [ v1.value1.constructor.name ]);
    };
    return Match(function (r) {
        return Data_Validation_Semiring.runV(Data_Validation_Semiring.invalid)(runEither)(v(r));
    });
};
module.exports = {
    Match: Match, 
    eitherMatch: eitherMatch, 
    runMatch: runMatch, 
    list: list, 
    unMatch: unMatch, 
    matchMatchClass: matchMatchClass, 
    matchFunctor: matchFunctor, 
    matchAlt: matchAlt, 
    matchPlus: matchPlus, 
    matchAlternative: matchAlternative, 
    matchApply: matchApply, 
    matchApplicative: matchApplicative
};
