"use strict";
var Prelude = require("Prelude");
var Data_Either = require("Data.Either");
var Data_Profunctor = require("Data.Profunctor");

/**
 *  | The `Choice` class extends `Profunctor` with combinators for working with
 *  | sum types.
 *  |
 *  | `left` and `right` lift values in a `Profunctor` to act on the `Left` and
 *  | `Right` components of a sum, respectively.
 */
var Choice = function (__superclass_Data$dotProfunctor$dotProfunctor_0, left, right) {
    this["__superclass_Data.Profunctor.Profunctor_0"] = __superclass_Data$dotProfunctor$dotProfunctor_0;
    this.left = left;
    this.right = right;
};

/**
 *  | The `Choice` class extends `Profunctor` with combinators for working with
 *  | sum types.
 *  |
 *  | `left` and `right` lift values in a `Profunctor` to act on the `Left` and
 *  | `Right` components of a sum, respectively.
 */
var right = function (dict) {
    return dict.right;
};

/**
 *  | The `Choice` class extends `Profunctor` with combinators for working with
 *  | sum types.
 *  |
 *  | `left` and `right` lift values in a `Profunctor` to act on the `Left` and
 *  | `Right` components of a sum, respectively.
 */
var left = function (dict) {
    return dict.left;
};

/**
 *  | Compose a value acting on a sum from two values, each acting on one of
 *  | the components of the sum.
 */
var $plus$plus$plus = function (dictCategory) {
    return function (dictChoice) {
        return function (l) {
            return function (r) {
                return Prelude[">>>"](dictCategory["__superclass_Prelude.Semigroupoid_0"]())(left(dictChoice)(l))(right(dictChoice)(r));
            };
        };
    };
};

/**
 *  | Compose a value which eliminates a sum from two values, each eliminating
 *  | one side of the sum.
 *  |
 *  | This combinator is useful when assembling values from smaller components,
 *  | because it provides a way to support two different types of input.
 */
var $bar$bar$bar = function (dictCategory) {
    return function (dictChoice) {
        return function (l) {
            return function (r) {
                var join = Data_Profunctor.dimap(dictChoice["__superclass_Data.Profunctor.Profunctor_0"]())(Data_Either.either(Prelude.id(Prelude.categoryFn))(Prelude.id(Prelude.categoryFn)))(Prelude.id(Prelude.categoryFn))(Prelude.id(dictCategory));
                return Prelude[">>>"](dictCategory["__superclass_Prelude.Semigroupoid_0"]())($plus$plus$plus(dictCategory)(dictChoice)(l)(r))(join);
            };
        };
    };
};
var choiceFn = new Choice(function () {
    return Data_Profunctor.profunctorFn;
}, function (v) {
    return function (v1) {
        if (v1 instanceof Data_Either.Left) {
            return Data_Either.Left.create(v(v1.value0));
        };
        if (v1 instanceof Data_Either.Right) {
            return new Data_Either.Right(v1.value0);
        };
        throw new Error("Failed pattern match at Data.Profunctor.Choice line 18, column 3 - line 19, column 3: " + [ v.constructor.name, v1.constructor.name ]);
    };
}, Prelude["<$>"](Data_Either.functorEither));
module.exports = {
    Choice: Choice, 
    "|||": $bar$bar$bar, 
    "+++": $plus$plus$plus, 
    right: right, 
    left: left, 
    choiceFn: choiceFn
};
