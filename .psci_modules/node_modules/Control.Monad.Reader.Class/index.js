
/**
 *  | This module defines the `MonadReader` type class and its instances.
 */
"use strict";
var Prelude = require("Prelude");

/**
 *  | The `MonadReader` type class represents those monads which support a global context via
 *  | `ask` and `local`.
 *  |
 *  | - `ask` reads the current context.
 *  | - `local f x` changes the value of the local context during the execution of the action `x`.
 *  |
 *  | An implementation is provided for `ReaderT`, and for other monad transformers
 *  | defined in this library.
 *  |
 *  | Laws:
 *  |
 *  | - `do { ask ; ask } = ask`
 *  | - `local f ask = f <$> ask`
 *  | - `local _ (pure a) = pure a`
 *  | - `local f (do { a <- x ; y }) = do { a <- local f x ; local f y }`
 */
var MonadReader = function (__superclass_Prelude$dotMonad_0, ask, local) {
    this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
    this.ask = ask;
    this.local = local;
};
var monadReaderFun = new MonadReader(function () {
    return Prelude.monadFn;
}, Prelude.id(Prelude.categoryFn), Prelude[">>>"](Prelude.semigroupoidFn));

/**
 *  | The `MonadReader` type class represents those monads which support a global context via
 *  | `ask` and `local`.
 *  |
 *  | - `ask` reads the current context.
 *  | - `local f x` changes the value of the local context during the execution of the action `x`.
 *  |
 *  | An implementation is provided for `ReaderT`, and for other monad transformers
 *  | defined in this library.
 *  |
 *  | Laws:
 *  |
 *  | - `do { ask ; ask } = ask`
 *  | - `local f ask = f <$> ask`
 *  | - `local _ (pure a) = pure a`
 *  | - `local f (do { a <- x ; y }) = do { a <- local f x ; local f y }`
 */
var local = function (dict) {
    return dict.local;
};

/**
 *  | The `MonadReader` type class represents those monads which support a global context via
 *  | `ask` and `local`.
 *  |
 *  | - `ask` reads the current context.
 *  | - `local f x` changes the value of the local context during the execution of the action `x`.
 *  |
 *  | An implementation is provided for `ReaderT`, and for other monad transformers
 *  | defined in this library.
 *  |
 *  | Laws:
 *  |
 *  | - `do { ask ; ask } = ask`
 *  | - `local f ask = f <$> ask`
 *  | - `local _ (pure a) = pure a`
 *  | - `local f (do { a <- x ; y }) = do { a <- local f x ; local f y }`
 */
var ask = function (dict) {
    return dict.ask;
};

/**
 *  | Read a value which depends on the global context in any `MonadReader`.
 */
var reader = function (dictMonadReader) {
    return function (f) {
        return Prelude[">>="]((dictMonadReader["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(ask(dictMonadReader))(function ($1) {
            return Prelude["return"]((dictMonadReader["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())(f($1));
        });
    };
};
module.exports = {
    MonadReader: MonadReader, 
    reader: reader, 
    local: local, 
    ask: ask, 
    monadReaderFun: monadReaderFun
};
