
/**
 *  | `Functor`/`Monad` products
 */
"use strict";
var Prelude = require("Prelude");
var Data_Tuple = require("Data.Tuple");
var Data_Foldable = require("Data.Foldable");
var Data_Traversable = require("Data.Traversable");
var Data_Bifunctor = require("Data.Bifunctor");
var Control_Apply = require("Control.Apply");

/**
 *  | `Product f g` is the product of the two functors `f` and `g`.
 */
var Product = function (x) {
    return x;
};

/**
 *  | Unwrap a product
 */
var runProduct = function (v) {
    return v;
};

/**
 *  | Create a product.
 */
var product = function (fa) {
    return function (ga) {
        return new Data_Tuple.Tuple(fa, ga);
    };
};
var functorProduct = function (dictFunctor) {
    return function (dictFunctor1) {
        return new Prelude.Functor(function (f) {
            return function ($58) {
                return Product(Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(Prelude.map(dictFunctor)(f))(Prelude.map(dictFunctor1)(f))(runProduct($58)));
            };
        });
    };
};
var foldableProduct = function (dictFoldable) {
    return function (dictFoldable1) {
        return new Data_Foldable.Foldable(function (dictMonoid) {
            return function (f) {
                return function (v) {
                    return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value0))(Data_Foldable.foldMap(dictFoldable1)(dictMonoid)(f)(v.value1));
                };
            };
        }, function (f) {
            return function (z) {
                return function (v) {
                    return Data_Foldable.foldl(dictFoldable1)(f)(Data_Foldable.foldl(dictFoldable)(f)(z)(v.value0))(v.value1);
                };
            };
        }, function (f) {
            return function (z) {
                return function (v) {
                    return Data_Foldable.foldr(dictFoldable)(f)(Data_Foldable.foldr(dictFoldable1)(f)(z)(v.value1))(v.value0);
                };
            };
        });
    };
};
var traversableProduct = function (dictTraversable) {
    return function (dictTraversable1) {
        return new Data_Traversable.Traversable(function () {
            return foldableProduct(dictTraversable["__superclass_Data.Foldable.Foldable_1"]())(dictTraversable1["__superclass_Data.Foldable.Foldable_1"]());
        }, function () {
            return functorProduct(dictTraversable["__superclass_Prelude.Functor_0"]())(dictTraversable1["__superclass_Prelude.Functor_0"]());
        }, function (dictApplicative) {
            return function (v) {
                return Control_Apply.lift2(dictApplicative["__superclass_Prelude.Apply_0"]())(product)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v.value0))(Data_Traversable.sequence(dictTraversable1)(dictApplicative)(v.value1));
            };
        }, function (dictApplicative) {
            return function (f) {
                return function (v) {
                    return Control_Apply.lift2(dictApplicative["__superclass_Prelude.Apply_0"]())(product)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)(v.value0))(Data_Traversable.traverse(dictTraversable1)(dictApplicative)(f)(v.value1));
                };
            };
        });
    };
};
var applyProduct = function (dictApply) {
    return function (dictApply1) {
        return new Prelude.Apply(function () {
            return functorProduct(dictApply["__superclass_Prelude.Functor_0"]())(dictApply1["__superclass_Prelude.Functor_0"]());
        }, function (v) {
            return function (v1) {
                return product(Prelude.apply(dictApply)(v.value0)(v1.value0))(Prelude.apply(dictApply1)(v.value1)(v1.value1));
            };
        });
    };
};
var bindProduct = function (dictBind) {
    return function (dictBind1) {
        return new Prelude.Bind(function () {
            return applyProduct(dictBind["__superclass_Prelude.Apply_0"]())(dictBind1["__superclass_Prelude.Apply_0"]());
        }, function (v) {
            return function (f) {
                return product(Prelude[">>="](dictBind)(v.value0)(function ($59) {
                    return Data_Tuple.fst(runProduct(f($59)));
                }))(Prelude[">>="](dictBind1)(v.value1)(function ($60) {
                    return Data_Tuple.snd(runProduct(f($60)));
                }));
            };
        });
    };
};
var applicativeProduct = function (dictApplicative) {
    return function (dictApplicative1) {
        return new Prelude.Applicative(function () {
            return applyProduct(dictApplicative["__superclass_Prelude.Apply_0"]())(dictApplicative1["__superclass_Prelude.Apply_0"]());
        }, function (a) {
            return product(Prelude.pure(dictApplicative)(a))(Prelude.pure(dictApplicative1)(a));
        });
    };
};
var monadProduct = function (dictMonad) {
    return function (dictMonad1) {
        return new Prelude.Monad(function () {
            return applicativeProduct(dictMonad["__superclass_Prelude.Applicative_0"]())(dictMonad1["__superclass_Prelude.Applicative_0"]());
        }, function () {
            return bindProduct(dictMonad["__superclass_Prelude.Bind_1"]())(dictMonad1["__superclass_Prelude.Bind_1"]());
        });
    };
};
module.exports = {
    Product: Product, 
    product: product, 
    runProduct: runProduct, 
    functorProduct: functorProduct, 
    foldableProduct: foldableProduct, 
    traversableProduct: traversableProduct, 
    applyProduct: applyProduct, 
    applicativeProduct: applicativeProduct, 
    bindProduct: bindProduct, 
    monadProduct: monadProduct
};
