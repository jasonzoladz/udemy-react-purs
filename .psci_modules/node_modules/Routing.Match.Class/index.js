"use strict";
var Prelude = require("Prelude");
var Control_Alternative = require("Control.Alternative");
var Data_Map = require("Data.Map");
var MatchClass = function (__superclass_Control$dotAlternative$dotAlternative_0, bool, fail, lit, num, param, params, str) {
    this["__superclass_Control.Alternative.Alternative_0"] = __superclass_Control$dotAlternative$dotAlternative_0;
    this.bool = bool;
    this.fail = fail;
    this.lit = lit;
    this.num = num;
    this.param = param;
    this.params = params;
    this.str = str;
};

/**
 *  | `str` matches any path string component.
 *  | For example, `str` matches `/foo` as `"foo"`.
 */
var str = function (dict) {
    return dict.str;
};

/**
 *  | `params` matches an entire query block. For exmaple, `params`
 *  | matches `/?q=a&r=b` as the map `{q : "a", r : "b"}`. Note that
 *  | `lit "foo" *> params` does *not* match `/foo`, since a query component
 *  | is *required*.
 */
var params = function (dict) {
    return dict.params;
};

/**
 *  | `param p` matches a parameter assignment `q=v` within a query block.
 *  | For example, `param "q"` matches `/?q=a&r=b` as `"a"`.
 */
var param = function (dict) {
    return dict.param;
};

/**
 *  | `num` matches any numerical path component.
 */
var num = function (dict) {
    return dict.num;
};

/**
 *  | `lit x` will match exactly the path component `x`.
 *  | For example, `lit "x"` matches `/x`.
 */
var lit = function (dict) {
    return dict.lit;
};
var fail = function (dict) {
    return dict.fail;
};

/**
 *  | `bool` matches any boolean path component.
 */
var bool = function (dict) {
    return dict.bool;
};
module.exports = {
    MatchClass: MatchClass, 
    fail: fail, 
    bool: bool, 
    num: num, 
    params: params, 
    param: param, 
    str: str, 
    lit: lit
};
