"use strict";
var Prelude = require("Prelude");
var Data_Identity = require("Data.Identity");
var Data_Map = require("Data.Map");
var Data_Maybe = require("Data.Maybe");
var Data_Set = require("Data.Set");
var Data_StrMap = require("Data.StrMap");
var Data_Array = require("Data.Array");
var Data_Traversable = require("Data.Traversable");
var Data_Lens_Internal_Wander = require("Data.Lens.Internal.Wander");
var Data_Lens_Types = require("Data.Lens.Types");
var Index = function (ix) {
    this.ix = ix;
};
var ix = function (dict) {
    return dict.ix;
};
var indexStrMap = new Index(function (k) {
    return function (dictWander) {
        return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
            return function (coalg) {
                return function (m) {
                    return Data_Maybe.maybe(Prelude.pure(dictApplicative)(m))(function ($20) {
                        return Prelude.map((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(function (v) {
                            return Data_StrMap.insert(k)(v)(m);
                        })(coalg($20));
                    })(Data_StrMap.lookup(k)(m));
                };
            };
        });
    };
});
var indexSet = function (dictOrd) {
    return new Index(function (x) {
        return function (dictWander) {
            return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
                return function (coalg) {
                    return function ($21) {
                        return Prelude.pure(dictApplicative)(Data_Set.insert(dictOrd)(x)($21));
                    };
                };
            });
        };
    });
};
var indexMaybe = new Index(function (v) {
    return function (dictWander) {
        return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
            return Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative);
        });
    };
});
var indexMap = function (dictOrd) {
    return new Index(function (k) {
        return function (dictWander) {
            return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
                return function (coalg) {
                    return function (m) {
                        return Data_Maybe.maybe(Prelude.pure(dictApplicative)(m))(function ($22) {
                            return Prelude.map((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(function (v) {
                                return Data_Map.insert(dictOrd)(k)(v)(m);
                            })(coalg($22));
                        })(Data_Map.lookup(dictOrd)(k)(m));
                    };
                };
            });
        };
    });
};
var indexIdentity = new Index(function (v) {
    return function (dictWander) {
        return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
            return Data_Traversable.traverse(Data_Identity.traversableIdentity)(dictApplicative);
        });
    };
});
var indexArray = new Index(function (n) {
    return function (dictWander) {
        return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
            return function (coalg) {
                return function (xs) {
                    return Data_Maybe.maybe(Prelude.pure(dictApplicative)(xs))(function ($23) {
                        return Prelude.map((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(function (x) {
                            return Data_Maybe.fromMaybe(xs)(Data_Array.updateAt(n)(x)(xs));
                        })(coalg($23));
                    })(Data_Array["!!"](xs)(n));
                };
            };
        });
    };
});
var indexArr = function (dictEq) {
    return new Index(function (i) {
        return function (dictWander) {
            return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
                return function (coalg) {
                    return function (f) {
                        return Prelude["<#>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(coalg(f(i)))(function (a) {
                            return function (j) {
                                var $19 = Prelude["=="](dictEq)(i)(j);
                                if ($19) {
                                    return a;
                                };
                                if (!$19) {
                                    return f(j);
                                };
                                throw new Error("Failed pattern match at Data.Lens.Index line 26, column 9 - line 28, column 1: " + [ $19.constructor.name ]);
                            };
                        });
                    };
                };
            });
        };
    });
};
module.exports = {
    Index: Index, 
    ix: ix, 
    indexArr: indexArr, 
    indexMaybe: indexMaybe, 
    indexIdentity: indexIdentity, 
    indexArray: indexArray, 
    indexSet: indexSet, 
    indexMap: indexMap, 
    indexStrMap: indexStrMap
};
