"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Control_Apply = require("Control.Apply");
var Data_Functor = require("Data.Functor");
var Routing = require("Routing");
var Routing_Match = require("Routing.Match");
var Routing_Match_Class = require("Routing.Match.Class");
var Routing_Hash = require("Routing.Hash");
var Data_Int = require("Data.Int");
var Index = (function () {
    function Index() {

    };
    Index.value = new Index();
    return Index;
})();
var Post = (function () {
    function Post(value0) {
        this.value0 = value0;
    };
    Post.create = function (value0) {
        return new Post(value0);
    };
    return Post;
})();
var NewPost = (function () {
    function NewPost() {

    };
    NewPost.value = new NewPost();
    return NewPost;
})();
var routesShow = new Prelude.Show(function (v) {
    if (v instanceof Index) {
        return "#/";
    };
    if (v instanceof Post) {
        return "#/posts/" + Prelude.show(Prelude.showInt)(v.value0);
    };
    if (v instanceof NewPost) {
        return "#/posts/new";
    };
    throw new Error("Failed pattern match at BlogRoutes line 20, column 3 - line 21, column 3: " + [ v.constructor.name ]);
});
var oneSlash = Routing_Match_Class.lit(Routing_Match.matchMatchClass)("");
var routing = (function () {
    var route = function (str) {
        return Control_Apply["*>"](Routing_Match.matchApply)(Routing_Match_Class.lit(Routing_Match.matchMatchClass)(""))(Routing_Match_Class.lit(Routing_Match.matchMatchClass)(str));
    };
    var newpost = Data_Functor["<$"](Routing_Match.matchFunctor)(NewPost.value)(Control_Apply["*>"](Routing_Match.matchApply)(Control_Apply["*>"](Routing_Match.matchApply)(oneSlash)(Routing_Match_Class.lit(Routing_Match.matchMatchClass)("posts")))(Routing_Match_Class.lit(Routing_Match.matchMatchClass)("new")));
    var $$int = Prelude["<$>"](Routing_Match.matchFunctor)(Data_Int.floor)(Routing_Match_Class.num(Routing_Match.matchMatchClass));
    var post = Prelude["<$>"](Routing_Match.matchFunctor)(Post.create)(Control_Apply["*>"](Routing_Match.matchApply)(route("posts"))($$int));
    var index = Data_Functor["<$"](Routing_Match.matchFunctor)(Index.value)(oneSlash);
    return Control_Alt["<|>"](Routing_Match.matchAlt)(Control_Alt["<|>"](Routing_Match.matchAlt)(newpost)(post))(index);
})();
module.exports = {
    Index: Index, 
    Post: Post, 
    NewPost: NewPost, 
    oneSlash: oneSlash, 
    routing: routing, 
    routesShow: routesShow
};
