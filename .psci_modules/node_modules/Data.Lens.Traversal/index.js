
/**
 *  | This module defines functions for working with traversals.
 */
"use strict";
var Prelude = require("Prelude");
var Control_Alternative = require("Control.Alternative");
var Control_Plus = require("Control.Plus");
var Data_Monoid_Disj = require("Data.Monoid.Disj");
var Data_Profunctor_Star = require("Data.Profunctor.Star");
var Data_Traversable = require("Data.Traversable");
var Data_Tuple = require("Data.Tuple");
var Data_Lens_Types_1 = require("Data.Lens.Types");
var Data_Lens_Types_1 = require("Data.Lens.Types");
var Data_Lens_Internal_Wander = require("Data.Lens.Internal.Wander");

/**
 *  | Create a `Traversal` which traverses the elements of a `Traversable` functor.
 */
var traversed = function (dictTraversable) {
    return function (dictWander) {
        return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
            return Data_Traversable.traverse(dictTraversable)(dictApplicative);
        });
    };
};

/**
 *  | Turn a pure profunctor `Traversal` into a `lens`-like `Traversal`.
 */
var traverseOf = function (dictApplicative) {
    return function (t) {
        return function ($11) {
            return Data_Profunctor_Star.runStar(t(Data_Profunctor_Star.Star($11)));
        };
    };
};

/**
 *  | Sequence the foci of a `Traversal`, pulling out an `Applicative` effect.
 *  | If you do not need the result, see `sequenceOf_` for `Fold`s.
 */
var sequenceOf = function (dictApplicative) {
    return function (t) {
        return traverseOf(dictApplicative)(t)(Prelude.id(Prelude.categoryFn));
    };
};

/**
 *  | Tries to map over a `Traversal`; returns `empty` if the traversal did
 *  | not have any new focus.
 */
var failover = function (dictAlternative) {
    return function (t) {
        return function (f) {
            return function (s) {
                var $6 = Data_Profunctor_Star.runStar(t(Data_Profunctor_Star.Star(function ($12) {
                    return Data_Tuple.Tuple.create(true)(f($12));
                })))(s);
                if ($6.value0) {
                    return Prelude.pure(dictAlternative["__superclass_Prelude.Applicative_0"]())($6.value1);
                };
                if (!$6.value0) {
                    return Control_Plus.empty(dictAlternative["__superclass_Control.Plus.Plus_1"]());
                };
                throw new Error("Failed pattern match at Data.Lens.Traversal line 46, column 18 - line 48, column 27: " + [ $6.constructor.name ]);
            };
        };
    };
};
module.exports = {
    failover: failover, 
    sequenceOf: sequenceOf, 
    traverseOf: traverseOf, 
    traversed: traversed
};
