
/**
 *  | This module defines the `RWS` monad.
 */
"use strict";
var Prelude = require("Prelude");
var Control_Monad_RWS_Class = require("Control.Monad.RWS.Class");
var Control_Monad_RWS_Trans = require("Control.Monad.RWS.Trans");
var Data_Identity = require("Data.Identity");
var Data_Tuple = require("Data.Tuple");

/**
 *  | Change the type of the context in a `RWS` action
 */
var withRWS = Control_Monad_RWS_Trans.withRWST;

/**
 *  | Create an action in the `RWS` monad from a function which uses the
 *  | global context and state explicitly.
 */
var rws = function (f) {
    return function (r) {
        return function (s) {
            return Prelude["return"](Data_Identity.applicativeIdentity)(f(r)(s));
        };
    };
};

/**
 *  | Run a computation in the `RWS` monad.
 */
var runRWS = function (m) {
    return function (r) {
        return function (s) {
            return Data_Identity.runIdentity(Control_Monad_RWS_Trans.runRWST(m)(r)(s));
        };
    };
};

/**
 *  | Change the types of the result and accumulator in a `RWS` action
 */
var mapRWS = function (f) {
    return Control_Monad_RWS_Trans.mapRWST(function ($0) {
        return Data_Identity.Identity(f(Data_Identity.runIdentity($0)));
    });
};

/**
 *  | Run a computation in the `RWS` monad, discarding the result
 */
var execRWS = function (m) {
    return function (r) {
        return function (s) {
            return Data_Identity.runIdentity(Control_Monad_RWS_Trans.execRWST(Data_Identity.monadIdentity)(m)(r)(s));
        };
    };
};

/**
 *  | Run a computation in the `RWS` monad, discarding the final state
 */
var evalRWS = function (m) {
    return function (r) {
        return function (s) {
            return Data_Identity.runIdentity(Control_Monad_RWS_Trans.evalRWST(Data_Identity.monadIdentity)(m)(r)(s));
        };
    };
};
module.exports = {
    withRWS: withRWS, 
    mapRWS: mapRWS, 
    execRWS: execRWS, 
    evalRWS: evalRWS, 
    runRWS: runRWS, 
    rws: rws
};
