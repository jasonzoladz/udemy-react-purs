"use strict";
var Prelude = require("Prelude");
var Control_Monad_Error_Class = require("Control.Monad.Error.Class");
var Control_Monad_Except_Trans = require("Control.Monad.Except.Trans");
var Data_Either = require("Data.Either");
var Data_Identity = require("Data.Identity");

/**
 *  | Transform any exceptions thrown by an `Except` computation using the given function.
 */
var withExcept = Control_Monad_Except_Trans.withExceptT(Data_Identity.functorIdentity);

/**
 *  | Run a computation in the `Except` monad. The inverse of `except`.
 */
var runExcept = function ($0) {
    return Data_Identity.runIdentity(Control_Monad_Except_Trans.runExceptT($0));
};

/**
 *  | Transform the unwrapped computation using the given function.
 */
var mapExcept = function (f) {
    return Control_Monad_Except_Trans.mapExceptT(function ($1) {
        return Data_Identity.Identity(f(Data_Identity.runIdentity($1)));
    });
};

/**
 *  | Construct a computation in the `Except` monad from an `Either` value.
 */
var except = function ($2) {
    return Control_Monad_Except_Trans.ExceptT(Data_Identity.Identity($2));
};
module.exports = {
    withExcept: withExcept, 
    mapExcept: mapExcept, 
    runExcept: runExcept, 
    except: except
};
