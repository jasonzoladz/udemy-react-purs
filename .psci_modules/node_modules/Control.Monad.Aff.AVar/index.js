
/**
 *  | A low-level primitive for building asynchronous code.
 */
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Control_Monad_Aff = require("Control.Monad.Aff");
var Control_Monad_Eff_Exception = require("Control.Monad.Eff.Exception");
var Data_Function = require("Data.Function");

/**
 *  | Takes the next value from the asynchronous avar.
 */
var takeVar = function (q) {
    return $foreign._takeVar(Control_Monad_Aff.nonCanceler, q);
};

/**
 *  | Puts a new value into the asynchronous avar. If the avar has
 *  | been killed, this will result in an error.
 */
var putVar = function (q) {
    return function (a) {
        return $foreign._putVar(Control_Monad_Aff.nonCanceler, q, a);
    };
};

/**
 *  | Modifies the value at the head of the avar (will suspend until one is available).
 */
var modifyVar = function (f) {
    return function (v) {
        return Prelude[">>="](Control_Monad_Aff.bindAff)(takeVar(v))(function ($2) {
            return putVar(v)(f($2));
        });
    };
};

/**
 *  | Makes a new asynchronous avar.
 */
var makeVar = $foreign._makeVar(Control_Monad_Aff.nonCanceler);

/**
 *  | Makes a avar and sets it to some value.
 */
var makeVar$prime = function (a) {
    return Prelude.bind(Control_Monad_Aff.bindAff)(makeVar)(function (v) {
        return Prelude.bind(Control_Monad_Aff.bindAff)(putVar(v)(a))(function () {
            return Prelude["return"](Control_Monad_Aff.applicativeAff)(v);
        });
    });
};

/**
 *  | Kills an asynchronous avar.
 */
var killVar = function (q) {
    return function (e) {
        return $foreign._killVar(Control_Monad_Aff.nonCanceler, q, e);
    };
};
module.exports = {
    takeVar: takeVar, 
    putVar: putVar, 
    modifyVar: modifyVar, 
    "makeVar'": makeVar$prime, 
    makeVar: makeVar, 
    killVar: killVar
};
