
/**
 *  | This module defines functions for working with setters.
 */
"use strict";
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var Data_Lens_Types = require("Data.Lens.Types");

/**
 *  | Apply a function to the foci of a `Setter`.
 */
var over = function (l) {
    return l;
};

/**
 *  | Set the foci of a `Setter` to a constant value.
 */
var set = function (l) {
    return function (b) {
        return over(l)(Prelude["const"](b));
    };
};

/**
 *  | Synonym for `set`.
 */
var $dot$tilde = set;
var $qmark$tilde = function (p) {
    return function ($8) {
        return set(p)(Data_Maybe.Just.create($8));
    };
};

/**
 *  | Synonym for `over`.
 */
var $percent$tilde = over;
var $amp$amp$tilde = function (dictBooleanAlgebra) {
    return function (p) {
        return function ($9) {
            return over(p)(Prelude.flip(Prelude.conj(dictBooleanAlgebra))($9));
        };
    };
};
var $times$tilde = function (dictSemiring) {
    return function (p) {
        return function ($10) {
            return over(p)(Prelude.flip(Prelude.mul(dictSemiring))($10));
        };
    };
};
var $plus$plus$tilde = function (dictSemigroup) {
    return function (p) {
        return function ($11) {
            return over(p)(Prelude.flip(Prelude.append(dictSemigroup))($11));
        };
    };
};
var $plus$tilde = function (dictSemiring) {
    return function (p) {
        return function ($12) {
            return over(p)(Prelude.add(dictSemiring)($12));
        };
    };
};
var $minus$tilde = function (dictRing) {
    return function (p) {
        return function ($13) {
            return over(p)(Prelude.flip(Prelude.sub(dictRing))($13));
        };
    };
};
var $div$div$tilde = function (dictDivisionRing) {
    return function (p) {
        return function ($14) {
            return over(p)(Prelude.flip(Prelude.div(dictDivisionRing["__superclass_Prelude.ModuloSemiring_1"]()))($14));
        };
    };
};
var $less$greater$tilde = function (dictSemigroup) {
    return function (p) {
        return function ($15) {
            return over(p)(Prelude.flip(Prelude.append(dictSemigroup))($15));
        };
    };
};
var $bar$bar$tilde = function (dictBooleanAlgebra) {
    return function (p) {
        return function ($16) {
            return over(p)(Prelude.flip(Prelude.disj(dictBooleanAlgebra))($16));
        };
    };
};
module.exports = {
    set: set, 
    over: over, 
    "?~": $qmark$tilde, 
    "++~": $plus$plus$tilde, 
    "<>~": $less$greater$tilde, 
    "&&~": $amp$amp$tilde, 
    "||~": $bar$bar$tilde, 
    "//~": $div$div$tilde, 
    "*~": $times$tilde, 
    "-~": $minus$tilde, 
    "+~": $plus$tilde, 
    ".~": $dot$tilde, 
    "%~": $percent$tilde
};
