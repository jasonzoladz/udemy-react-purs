"use strict";
var Prelude = require("Prelude");
var Data_List = require("Data.List");
var Data_Foldable = require("Data.Foldable");
var Data_Traversable = require("Data.Traversable");

/**
 *  | The free `Semiring` for a type `a`.
 */
var Free = function (x) {
    return x;
};
var showFree = function (dictShow) {
    return new Prelude.Show(function (v) {
        return "Free (" + (Prelude.show(Data_List.showList(Data_List.showList(dictShow)))(v) + ")");
    });
};
var semiringFree = new Prelude.Semiring(function (v) {
    return function (v1) {
        return Prelude["<>"](Data_List.semigroupList)(v)(v1);
    };
}, function (v) {
    return function (v1) {
        return Prelude.bind(Data_List.bindList)(v)(function (v2) {
            return Prelude.bind(Data_List.bindList)(v1)(function (v3) {
                return Prelude["return"](Data_List.applicativeList)(Prelude["<>"](Data_List.semigroupList)(v2)(v3));
            });
        });
    };
}, Data_List.singleton(Data_List.Nil.value), Data_List.Nil.value);

/**
 *  | Unpack a value of type `Free a`.
 */
var runFree = function (v) {
    return v;
};

/**
 *  | `Free` is left adjoint to the forgetful functor from `Semiring`s to types.
 */
var liftFree = function (dictSemiring) {
    return function (f) {
        return function (v) {
            return Data_Foldable.sum(Data_List.foldableList)(dictSemiring)(Prelude.map(Data_List.functorList)(function ($59) {
                return Data_Foldable.product(Data_List.foldableList)(dictSemiring)(Prelude.map(Data_List.functorList)(f)($59));
            })(v));
        };
    };
};
var functorFree = new Prelude.Functor(function (fn) {
    return function (v) {
        return Free(Prelude["<$>"](Data_List.functorList)(Prelude.map(Data_List.functorList)(fn))(v));
    };
});

/**
 *  | Lift a value of type `a` to a value of type `Free a`
 */
var free = function (a) {
    return Data_List.singleton(Data_List.singleton(a));
};

/**
 *  | `Free` is left adjoint to the forgetful functor from `Semiring`s to types.
 */
var lowerFree = function (dictSemiring) {
    return function (f) {
        return function (a) {
            return f(free(a));
        };
    };
};
var foldableFree = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (fn) {
        return function (v) {
            return Data_Foldable.fold(Data_List.foldableList)(dictMonoid)(Data_Foldable.foldMap(Data_List.foldableList)(Data_List.monoidList)(Prelude["<$>"](Data_List.functorList)(fn))(v));
        };
    };
}, function (fn) {
    return function (accum) {
        return function (v) {
            return Data_Foldable.foldl(Data_List.foldableList)(Data_Foldable.foldl(Data_List.foldableList)(fn))(accum)(v);
        };
    };
}, function (fn) {
    return function (accum) {
        return function (v) {
            return Data_Foldable.foldr(Data_List.foldableList)(Prelude.flip(Data_Foldable.foldr(Data_List.foldableList)(fn)))(accum)(v);
        };
    };
});
var traversableFree = new Data_Traversable.Traversable(function () {
    return foldableFree;
}, function () {
    return functorFree;
}, function (dictApplicative) {
    return function (v) {
        return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Free)(Data_Traversable.sequence(Data_List.traversableList)(dictApplicative)(Prelude["<$>"](Data_List.functorList)(Data_Traversable.sequence(Data_List.traversableList)(dictApplicative))(v)));
    };
}, function (dictApplicative) {
    return function (fn) {
        return function (freeA) {
            return Data_Traversable.sequence(traversableFree)(dictApplicative)(Prelude["<$>"](functorFree)(fn)(freeA));
        };
    };
});
var eqFree = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            return Prelude["=="](Data_List.eqList(Data_List.eqList(dictEq)))(v)(v1);
        };
    });
};
var ordFree = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqFree(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (v) {
        return function (v1) {
            return Prelude.compare(Data_List.ordList(Data_List.ordList(dictOrd)))(v)(v1);
        };
    });
};
var applyFree = new Prelude.Apply(function () {
    return functorFree;
}, function (v) {
    return function (v1) {
        return Free(Prelude.bind(Data_List.bindList)(v)(function (v2) {
            return Prelude.bind(Data_List.bindList)(v1)(function (v3) {
                return Prelude.pure(Data_List.applicativeList)(Prelude.apply(Data_List.applyList)(v2)(v3));
            });
        }));
    };
});
var applicativeFree = new Prelude.Applicative(function () {
    return applyFree;
}, free);
module.exports = {
    lowerFree: lowerFree, 
    liftFree: liftFree, 
    free: free, 
    runFree: runFree, 
    showFree: showFree, 
    eqFree: eqFree, 
    ordFree: ordFree, 
    semiringFree: semiringFree, 
    functorFree: functorFree, 
    applyFree: applyFree, 
    applicativeFree: applicativeFree, 
    foldableFree: foldableFree, 
    traversableFree: traversableFree
};
