"use strict";
var Prelude = require("Prelude");
var Control_MonadPlus = require("Control.MonadPlus");
var Data_Maybe = require("Data.Maybe");
var Data_Tuple = require("Data.Tuple");
var Data_List = require("Data.List");
var Data_Traversable = require("Data.Traversable");
var Data_Map = require("Data.Map");
var Data_String = require("Data.String");
var Data_Array = require("Data.Array");
var Routing_Types = require("Routing.Types");
var Data_Foldable = require("Data.Foldable");

/**
 *  | Parse part of hash. Will return `Query (Map String String)` for query
 *  | i.e. `"?foo=bar&bar=baz"` -->
 *  |     `Query (fromList [Tuple "foo" "bar", Tuple "bar" "baz"])`
 */
var parsePart = function (str) {
    var parts = Data_List.toList(Data_Foldable.foldableArray)(Data_String.split("&")(Data_String.drop(1)(str)));
    var part2tuple = function (input) {
        var keyVal = Data_String.split("=")(input);
        return Prelude.bind(Data_Maybe.bindMaybe)(Control_MonadPlus.guard(Data_Maybe.monadPlusMaybe)(Data_Array.length(keyVal) <= 2))(function () {
            return Prelude["<*>"](Data_Maybe.applyMaybe)(Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create)(Data_Array.head(keyVal)))(Data_Array["!!"](keyVal)(1));
        });
    };
    return Data_Maybe.fromMaybe(new Routing_Types.Path(str))(Prelude.bind(Data_Maybe.bindMaybe)(Control_MonadPlus.guard(Data_Maybe.monadPlusMaybe)(Data_String.take(1)(str) === "?"))(function () {
        return Prelude.map(Data_Maybe.functorMaybe)(function ($0) {
            return Routing_Types.Query.create(Data_Map.fromList(Prelude.ordString)($0));
        })(Data_Traversable.traverse(Data_List.traversableList)(Data_Maybe.applicativeMaybe)(part2tuple)(parts));
    }));
};

/**
 *  | Parse hash string to `Route` with `decoder` function
 *  | applied to every hash part (usually `decodeURIComponent`)
 */
var parse = function (decoder) {
    return function (hash) {
        return Prelude.map(Data_List.functorList)(function ($1) {
            return parsePart(decoder($1));
        })(Data_List.toList(Data_Foldable.foldableArray)(Data_String.split("/")(hash)));
    };
};
module.exports = {
    parse: parse
};
