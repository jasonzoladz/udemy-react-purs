"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_Aff = require("Control.Monad.Aff");
var Data_Maybe = require("Data.Maybe");
var Data_Either = require("Data.Either");
var Data_Tuple = require("Data.Tuple");
var Data_String_Regex = require("Data.String.Regex");
var Routing_Parser = require("Routing.Parser");
var Routing_Match = require("Routing.Match");
var matchHash$prime = function (decoder) {
    return function (matcher) {
        return function (hash) {
            return Routing_Match.runMatch(matcher)(Routing_Parser.parse(decoder)(hash));
        };
    };
};
var matchHash = matchHash$prime($foreign["decodeURIComponent"]);
var hashes = function (cb) {
    var dropHash = function (h) {
        return Data_String_Regex.replace(Data_String_Regex.regex("^[^#]*#")(Data_String_Regex.noFlags))("")(h);
    };
    return $foreign.hashChanged(function (old) {
        return function ($$new) {
            return cb(dropHash(old))(dropHash($$new));
        };
    });
};
var matches$prime = function (decoder) {
    return function (routing) {
        return function (cb) {
            return hashes(function (old) {
                return function ($$new) {
                    var mr = matchHash$prime(decoder)(routing);
                    var fst = Data_Either.either(Prelude["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(mr(old));
                    return Data_Either.either(Prelude["const"](Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit)))(cb(fst))(mr($$new));
                };
            });
        };
    };
};

/**
 *  | Stream of hash changed, callback called when new hash can be matched
 *  | First argument of callback is `Just a` when old hash can be matched
 *  | and `Nothing` when it can't.
 */
var matches = matches$prime($foreign["decodeURIComponent"]);
var matchesAff$prime = function (decoder) {
    return function (routing) {
        return Control_Monad_Aff.makeAff(function (v) {
            return function (k) {
                return matches$prime(decoder)(routing)(function (old) {
                    return function ($$new) {
                        return k(new Data_Tuple.Tuple(old, $$new));
                    };
                });
            };
        });
    };
};
var matchesAff = matchesAff$prime($foreign["decodeURIComponent"]);
module.exports = {
    "matchesAff'": matchesAff$prime, 
    matchesAff: matchesAff, 
    "matchHash'": matchHash$prime, 
    matchHash: matchHash, 
    "matches'": matches$prime, 
    matches: matches, 
    hashes: hashes, 
    hashChanged: $foreign.hashChanged
};
