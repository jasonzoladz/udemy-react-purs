
/**
 *  | This module defines the `ComonadStore` type class and its instances.
 */
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Comonad_Store_Trans = require("Control.Comonad.Store.Trans");
var Control_Extend = require("Control.Extend");
var Data_Tuple = require("Data.Tuple");

/**
 *  | The `ComonadStore` type class represents those monads which support local position information via
 *  | `pos` and `peek`.
 *  |
 *  | - `pos` reads the current position.
 *  | - `peek` reads the value at the specified position in the specified context.
 *  |
 *  | An implementation is provided for `StoreT`.
 *  |
 *  | Laws:
 *  |
 *  | - `pos (extend _ x) = pos x`
 *  | - `peek (pos x) x = extract x`
 *  |
 *  | For example:
 *  |
 *  | ```purescript
 *  | blur :: forall w. (ComonadStore Number w) -> w Number -> w Number
 *  | blur = extend \r -> (peeks (\n -> n - 1) r + peeks (\n -> n + 1) r) / 2)
 *  | ```
 */
var ComonadStore = function (__superclass_Control$dotComonad$dotComonad_0, peek, pos) {
    this["__superclass_Control.Comonad.Comonad_0"] = __superclass_Control$dotComonad$dotComonad_0;
    this.peek = peek;
    this.pos = pos;
};

/**
 *  | The `ComonadStore` type class represents those monads which support local position information via
 *  | `pos` and `peek`.
 *  |
 *  | - `pos` reads the current position.
 *  | - `peek` reads the value at the specified position in the specified context.
 *  |
 *  | An implementation is provided for `StoreT`.
 *  |
 *  | Laws:
 *  |
 *  | - `pos (extend _ x) = pos x`
 *  | - `peek (pos x) x = extract x`
 *  |
 *  | For example:
 *  |
 *  | ```purescript
 *  | blur :: forall w. (ComonadStore Number w) -> w Number -> w Number
 *  | blur = extend \r -> (peeks (\n -> n - 1) r + peeks (\n -> n + 1) r) / 2)
 *  | ```
 */
var pos = function (dict) {
    return dict.pos;
};

/**
 *  | The `ComonadStore` type class represents those monads which support local position information via
 *  | `pos` and `peek`.
 *  |
 *  | - `pos` reads the current position.
 *  | - `peek` reads the value at the specified position in the specified context.
 *  |
 *  | An implementation is provided for `StoreT`.
 *  |
 *  | Laws:
 *  |
 *  | - `pos (extend _ x) = pos x`
 *  | - `peek (pos x) x = extract x`
 *  |
 *  | For example:
 *  |
 *  | ```purescript
 *  | blur :: forall w. (ComonadStore Number w) -> w Number -> w Number
 *  | blur = extend \r -> (peeks (\n -> n - 1) r + peeks (\n -> n + 1) r) / 2)
 *  | ```
 */
var peek = function (dict) {
    return dict.peek;
};

/**
 *  | Extract a value from a position which depends on the current position.
 */
var peeks = function (dictComonadStore) {
    return function (f) {
        return function (x) {
            return peek(dictComonadStore)(f(pos(dictComonadStore)(x)))(x);
        };
    };
};

/**
 *  | Reposition the focus at the specified position, which depends on the current position.
 */
var seeks = function (dictComonadStore) {
    return function (dictExtend) {
        return function (f) {
            return function (x) {
                return peeks(dictComonadStore)(f)(Control_Extend.duplicate(dictExtend)(x));
            };
        };
    };
};

/**
 *  | Reposition the focus at the specified position.
 */
var seek = function (dictComonadStore) {
    return function (dictExtend) {
        return function (s) {
            return function (x) {
                return peek(dictComonadStore)(s)(Control_Extend.duplicate(dictExtend)(x));
            };
        };
    };
};

/**
 *  | Extract a collection of values from positions which depend on the current position.
 */
var experiment = function (dictComonadStore) {
    return function (dictFunctor) {
        return function (f) {
            return function (x) {
                return Prelude["<$>"](dictFunctor)(Prelude.flip(peek(dictComonadStore))(x))(f(pos(dictComonadStore)(x)));
            };
        };
    };
};
var comonadStoreStoreT = function (dictComonad) {
    return new ComonadStore(function () {
        return Control_Comonad_Store_Trans.comonadStoreT(dictComonad);
    }, function (s) {
        return function (v) {
            return Control_Comonad.extract(dictComonad)(v.value0)(s);
        };
    }, function (v) {
        return v.value1;
    });
};
module.exports = {
    ComonadStore: ComonadStore, 
    seeks: seeks, 
    seek: seek, 
    peeks: peeks, 
    experiment: experiment, 
    peek: peek, 
    pos: pos, 
    comonadStoreStoreT: comonadStoreStoreT
};
